import logging, messages, db, mainmenu, config, random
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardRemove, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from buttons import *
from datetime import datetime, timedelta
import server_commands as sc
from pyqiwip2p import QiwiP2P
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from handlers import admin


storage = MemoryStorage()
logging.basicConfig(level=logging.INFO)
bot = Bot(token=config.API_TOKEN, parse_mode=types.ParseMode.HTML)
dp = Dispatcher(bot, storage=storage)
p2p = QiwiP2P(auth_key=config.QIWI_TOKEN)

admin.register_handlers_admin(dp)

servers_kb = ReplyKeyboardMarkup(resize_keyboard=True)
servers_kb.add(button_amsterdam, button_london).add(button_cancel)
get_keys_kb = ReplyKeyboardMarkup(resize_keyboard=True)
get_keys_kb.add(button_get_key).add(button_cancel)


#–†–∞–∑–±–∏—Ç –Ω–∞ —Ç—Ä–∏ —Ö—ç–Ω–¥–ª–µ—Ä–∞, —É–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–æ–≤
"""@dp.message_handler(content_types=types.ContentTypes.PHOTO)
async def send_to_admin(message: types.Message):
    db.add_days(message.from_user.id)
    next_payment_date = db.when_to_pay(message.from_user.id)
    button_link_user = InlineKeyboardButton(text="–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", url=f"tg://user?id={message.from_user.id}")
    link_user_kb = InlineKeyboardMarkup(row_width=1)
    link_user_kb.add(button_link_user)
    
    if not db.is_registered(message.from_user.id):
        await message.answer('–Ø –≤–∞—Å –Ω–µ —É–∑–Ω–∞—é. –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å, –ø—Ä–µ–∂–¥–µ —á–µ–º –æ–ø–ª–∞—á–∏–≤–∞—Ç—å?', reply_markup=mainmenu.main_kb(message.from_user.id))
        await bot.send_message(376131047, f'<b>–ù–ï–ó–ê–†–ï–ì–ò–°–¢–ò–†–û–í–ê–ù–ù–´–ô</b> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id {message.from_user.id} ({message.from_user.username} / {message.from_user.first_name}) –ø—Ä–∏—Å–ª–∞–ª —Ñ–æ—Ç–æ', reply_markup=link_user_kb)
        await bot.send_photo(chat_id=376131047, photo=message.photo[-1].file_id)
    else:
        sc.delete_limit(db.get_rdn_id_from_user(message.from_user.id)[0], db.get_rdn_id_from_user(message.from_user.id)[1])    
        db.update_flag_blocked(message.from_user.id, 'false')
        await message.answer(f"–°–ø–∞—Å–∏–±–æ, —Å–∫—Ä–∏–Ω—à–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.\n\n–î–æ—Å—Ç—É–ø –∫ —Å–µ—Ä–≤–∏—Å—É —É–∂–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.\n\n–î–∞—Ç–∞ —Å–ª–µ–¥—É—é—â–µ–π –æ–ø–ª–∞—Ç—ã: –¥–æ {next_payment_date}\n\n–ù–∞–ø–æ–º–Ω—é –≤ –¥–µ–Ω—å –æ–ø–ª–∞—Ç—ã.", reply_markup=mainmenu.main_kb(message.from_user.id))
        await bot.send_animation(message.from_user.id, animation='https://i.gifer.com/2Ts.gif')
        await bot.send_message(376131047, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id {message.from_user.id} ({message.from_user.username} / {message.from_user.first_name}) –ø—Ä–∏—Å–ª–∞–ª —Ñ–æ—Ç–æ', reply_markup=link_user_kb)
        await bot.send_photo(chat_id=376131047, photo=message.photo[-1].file_id)"""

@dp.message_handler(content_types=types.ContentTypes.PHOTO)
async def photo_type_selection(message: types.Message):
    button_confirm = InlineKeyboardButton(text='–î–∞, —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø', callback_data='confirm_payment')
    button_unconfirm = InlineKeyboardButton(text='–ù–µ—Ç, –º–Ω–µ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å', callback_data='unconfirm_payment')
    choice_user_kb = InlineKeyboardMarkup(row_width=1)
    choice_user_kb.add(button_confirm).add(button_unconfirm)
    button_link_user = InlineKeyboardButton(text="–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", url=f"tg://user?id={message.from_user.id}")
    link_user_kb = InlineKeyboardMarkup(row_width=1)
    link_user_kb.add(button_link_user)
    await message.answer("–≠—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã?", reply_markup=choice_user_kb)
    await bot.send_message(376131047, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id {message.from_user.id} ({message.from_user.username} / {message.from_user.first_name}) –ø—Ä–∏—Å–ª–∞–ª —Ñ–æ—Ç–æ', reply_markup=link_user_kb)
    await bot.send_photo(chat_id=376131047, photo=message.photo[-1].file_id)


@dp.callback_query_handler(text="confirm_payment")
async def confirm_payment(callback: types.Message):
    db.add_days(callback.from_user.id)
    next_payment_date = db.when_to_pay(callback.from_user.id)
    
    if not db.is_registered(callback.from_user.id):
        await callback.answer('–Ø –≤–∞—Å –Ω–µ —É–∑–Ω–∞—é. –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å, –ø—Ä–µ–∂–¥–µ —á–µ–º –æ–ø–ª–∞—á–∏–≤–∞—Ç—å?', reply_markup=mainmenu.main_kb(callback.from_user.id))
    else:
        sc.delete_limit(db.get_rdn_id_from_user(callback.from_user.id)[0], db.get_rdn_id_from_user(callback.from_user.id)[1])    
        db.update_flag_blocked(callback.from_user.id, 'false')
        await callback.message.delete()
        await bot.send_message(callback.from_user.id, f"–°–ø–∞—Å–∏–±–æ, —Å–∫—Ä–∏–Ω—à–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.\n\n–î–æ—Å—Ç—É–ø –∫ —Å–µ—Ä–≤–∏—Å—É —É–∂–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.\n\n–î–∞—Ç–∞ —Å–ª–µ–¥—É—é—â–µ–π –æ–ø–ª–∞—Ç—ã: –¥–æ {next_payment_date}\n\n–ù–∞–ø–æ–º–Ω—é –≤ –¥–µ–Ω—å –æ–ø–ª–∞—Ç—ã.")
        await bot.send_message(376131047, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id {callback.from_user.id} ({callback.from_user.username} / {callback.from_user.first_name}) –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –æ–ø–ª–∞—Ç—É —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–º')
        #await bot.send_animation(callback.from_user.id, animation='https://i.gifer.com/2Ts.gif')


@dp.callback_query_handler(text="unconfirm_payment")
async def unconfirm_payment(callback: types.Message):
        await callback.message.delete()
        await bot.send_message(callback.from_user.id, f"–í–∞—à —Å–∫—Ä–∏–Ω—à–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –û–Ω —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è")
        await bot.send_message(376131047, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id {callback.from_user.id} ({callback.from_user.username} / {callback.from_user.first_name}) –Ω—É–∂–¥–∞–µ—Ç—Å—è –≤ –ø–æ–º–æ—â–∏ –ø–æ —Å–∫—Ä–∏–Ω—à–æ—Ç—É')


@dp.message_handler(content_types=types.ContentTypes.DOCUMENT)
async def send_to_admin(message: types.Message):
    '''–ü—Ä–∏—Å—ã–ª–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã'''

    db.add_days(message.from_user.id)
    next_payment_date = db.when_to_pay(message.from_user.id)
    button_link_user = InlineKeyboardButton(text="–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", url=f"tg://user?id={message.from_user.id}")
    link_user_kb = InlineKeyboardMarkup(row_width=1)
    link_user_kb.add(button_link_user)
    
    if not db.is_registered(message.from_user.id):
        await message.answer('–Ø –≤–∞—Å –Ω–µ —É–∑–Ω–∞—é. –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å, –ø—Ä–µ–∂–¥–µ —á–µ–º –æ–ø–ª–∞—á–∏–≤–∞—Ç—å?', reply_markup=mainmenu.main_kb(message.from_user.id))
        await bot.send_message(376131047, f'<b>–ù–ï–ó–ê–†–ï–ì–ò–°–¢–ò–†–û–í–ê–ù–ù–´–ô</b> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id {message.from_user.id} ({message.from_user.username} / {message.from_user.first_name}) –ø—Ä–∏—Å–ª–∞–ª —Ñ–æ—Ç–æ', reply_markup=link_user_kb)
        await bot.send_photo(chat_id=376131047, photo=message.photo[-1].file_id)
    else:
        sc.delete_limit(db.get_rdn_id_from_user(message.from_user.id)[0], db.get_rdn_id_from_user(message.from_user.id)[1], db.get_rdn_id_from_user(message.from_user.id)[2]) 
        db.update_flag_blocked(message.from_user.id, 'false')   
        await message.answer(f"–°–ø–∞—Å–∏–±–æ, –¥–æ–∫—É–º–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.\n\n–î–æ—Å—Ç—É–ø –∫ —Å–µ—Ä–≤–∏—Å—É –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.\n\n–î–∞—Ç–∞ —Å–ª–µ–¥—É—é—â–µ–π –æ–ø–ª–∞—Ç—ã: –¥–æ {next_payment_date}\n\n–ù–∞–ø–æ–º–Ω—é –≤ –¥–µ–Ω—å –æ–ø–ª–∞—Ç—ã.", reply_markup=mainmenu.main_kb(message.from_user.id))
        #await message.answer("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω 1 –º–µ—Å—è—Ü –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–µ—Ä–≤–∏—Å—É.")
        await bot.send_animation(message.from_user.id, animation='https://i.gifer.com/2Ts.gif')
        await bot.send_message(376131047, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id {message.from_user.id} ({message.from_user.username} / {message.from_user.first_name}) –ø—Ä–∏—Å–ª–∞–ª –¥–æ–∫—É–º–µ–Ω—Ç', reply_markup=link_user_kb)
        await bot.send_document(chat_id=376131047, document=message.document.file_id)


@dp.message_handler(commands=['start', 'help'])
async def send_welcome(message: types.Message):

    button_link_user = InlineKeyboardButton(text="–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", url=f"tg://user?id={message.from_user.id}")
    link_user_kb = InlineKeyboardMarkup(row_width=1)
    link_user_kb.add(button_link_user)
    current_time = datetime.now().replace(microsecond=0)
    db.launched_bot(message.from_user.id, current_time)
    
    if db.is_registered(message.from_user.id):
        await message.answer("–ú—ã —Ä–∞–¥—ã, —á—Ç–æ –≤—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å! üòá\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç –º–µ–Ω—é, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.", reply_markup=mainmenu.main_kb(message.from_user.id))
    else:
        await bot.send_message(376131047, '–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞!\n' # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞
                                            f'User id: {message.from_user.id}\n'
                                            f'–ò–º—è: {message.from_user.first_name} {message.from_user.last_name}', reply_markup=link_user_kb)
        await message.answer(messages.welcome_message, reply_markup=mainmenu.main_kb(message.from_user.id))


@dp.message_handler(commands=['cmd'])
async def add_key(message: types.Message):
    if message.from_user.id in config.admins:
        await message.reply(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/start\n/get_user_id\n/get_info\n/get_free_keys\n/set_limit\n/delete_limit")
    else:
        await message.reply(f"–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")


@dp.message_handler(commands=['ban'])
async def ban(message: types.Message):
    users = db.ban()
    count = 0
    inactive_users = []
    amount_of_messages = 0
    for id in users:
        try:
            pay_menu = InlineKeyboardMarkup(row_width=1)
            button_url_qiwi = InlineKeyboardButton(text='–û–ø–ª–∞—Ç–∏—Ç—å –∫–∞—Ä—Ç–æ–π', callback_data='pay_by_card')
            button_pay_by_phone = InlineKeyboardButton(text='–û–ø–ª–∞—Ç–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥–æ–º', callback_data='pay_by_phone_number')
            pay_menu.insert(button_url_qiwi).insert(button_pay_by_phone)
            await bot.send_message(id, f'–ù–∞–º –æ—á–µ–Ω—å –∂–∞–ª—å, –Ω–æ –º—ã –≤—ã–Ω—É–∂–¥–µ–Ω—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à–∏ –∫–ª—é—á–∏ –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –æ–ø–ª–∞—Ç—ã üòû\n\n–í—ã –º–æ–∂–µ—Ç–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø, –æ–ø–ª–∞—Ç–∏–≤ {db.get_tariff(id)} —Ä—É–±–ª–µ–π, –≤—ã–±—Ä–∞–≤ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ–ø–ª–∞—Ç—ã –Ω–∏–∂–µ.', reply_markup=pay_menu)
            amount_of_messages += 1
            sc.set_limit(db.get_rdn_id_from_user(id)[0], db.get_rdn_id_from_user(id)[1])
            db.update_flag_blocked(id, 'true')
        except:
            count += 1
            inactive_users.append(id)
            sc.set_limit(db.get_rdn_id_from_user(id)[0], db.get_rdn_id_from_user(id)[1])
            db.update_flag_blocked(id, 'true')
    await message.answer(f"–ì–æ—Ç–æ–≤–æ!\n–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}.\n\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {amount_of_messages}.")
    await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –æ—Ç–∫–ª—é—á–∏–≤—à–∏–µ –±–æ—Ç–∞: {inactive_users}\n\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {count}")
    

@dp.message_handler(commands=['set_limit'])
async def add_key(message: types.Message):
    sc.set_limit(db.get_rdn_id_from_user(message.from_user.id)[0], db.get_rdn_id_from_user(message.from_user.id)[1], db.get_rdn_id_from_user(message.from_user.id)[2])
    await message.reply("–ü—Ä–æ–≤–µ—Ä—è–π –±–ª–æ–∫–∏—Ä–æ–≤–∫—É")


@dp.message_handler(commands=['delete_limit'])
async def add_key(message: types.Message):
    sc.delete_limit(db.get_rdn_id_from_user(message.from_user.id)[0], db.get_rdn_id_from_user(message.from_user.id)[1], db.get_rdn_id_from_user(message.from_user.id)[2])
    await message.reply("–ü—Ä–æ–≤–µ—Ä—è–π —Å–Ω—è—Ç–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏")


@dp.message_handler(commands=['get_user_id'])
async def add_key(message: types.Message):
    await message.reply(f"–¢–≤–æ–π user id: {message.from_user.id}" ) 


@dp.message_handler(commands=['get_free_keys'])
async def add_key(message: types.Message):
    await message.reply(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –∫–ª—é—á–µ–π: {db.get_free_keys()}" )   


@dp.message_handler(commands=['get_info'])
async def get_info(message: types.Message):
    await message.reply(message)


@dp.message_handler(commands=['send_a_reminder'])
async def get_info(message: types.Message):
    users = db.get_ids_who_to_pay_soon() #–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —É –∫–æ–≥–æ –æ–ø–ª–∞—Ç–∞ —Å–µ–≥–æ–¥–Ω—è
    count = 0
    inactive_users = []
    amount_of_messages = 0
    for id in users:
        try:
            pay_menu = InlineKeyboardMarkup(row_width=1)
            button_url_qiwi = InlineKeyboardButton(text='–û–ø–ª–∞—Ç–∏—Ç—å –∫–∞—Ä—Ç–æ–π', callback_data='pay_by_card')
            button_pay_by_phone = InlineKeyboardButton(text='–û–ø–ª–∞—Ç–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥–æ–º', callback_data='pay_by_phone_number')
            pay_menu.insert(button_url_qiwi).insert(button_pay_by_phone)
            if db.was_a_payment(message.from_user.id):
                await bot.send_message(id, f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å –¥–æ—Å—Ç—É–ø <b>—Å–µ–≥–æ–¥–Ω—è –¥–æ 23:59 –ú–°–ö</b> —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è VPN', reply_markup=pay_menu)
                amount_of_messages += 1
            else:
                await bot.send_message(id, f'–ü—Ä–æ–±–Ω—ã–µ —Ç—Ä–∏ –¥–Ω—è –ø–æ–¥—Ö–æ–¥—è—Ç –∫ –∫–æ–Ω—Ü—É üòî\n–í–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å —Å–∫–æ—Ä–æ—Å—Ç—å? –ü–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –Ω–∞—à–∏–º VPN?\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å –¥–æ—Å—Ç—É–ø <b>—Å–µ–≥–æ–¥–Ω—è –¥–æ 23:59 –ú–°–ö</b> —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è VPN', reply_markup=pay_menu)
                amount_of_messages += 1
        except:
            await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞")
            count += 1
            inactive_users.append(id)
    await message.answer(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–ø–ª–∞—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.\n–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ø—É–ª–µ: {len(users)}.\n\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {amount_of_messages}.")
    await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –æ—Ç–∫–ª—é—á–∏–≤—à–∏–µ –±–æ—Ç–∞: {inactive_users}\n\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {count}")


@dp.message_handler(text="–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è")
async def price(message: types.Message):
    if db.is_registered(message.from_user.id): # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        await message.answer(messages.arleady_registered, reply_markup=get_keys_kb) # –ï—Å–ª–∏ –¥–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ arleady_registered
    else:
        user_name = ''
        telegram_username = ''

        if message.from_user.first_name: # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–∫–∞–∑–∞–Ω–æ –ª–∏ –∏–º—è –∏ –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –∫ user_name
            user_name += str(message.from_user.first_name)
            user_name += ' '

        if message.from_user.last_name: # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–∫–∞–∑–∞–Ω–∞ –ª–∏ —Ñ–∞–º–∏–ª–∏—è –∏ –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –∫ user_name
            user_name += str(message.from_user.last_name)

        if message.from_user.username: # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–∫–∞–∑–∞–Ω –ª–∏ –Ω–∏–∫–Ω–µ–π–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –∫ telegram_username
            telegram_username += str(message.from_user.username)

        current_time = datetime.now().replace(microsecond=0) # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
        shutdown_date = current_time.replace(hour=23, minute=59, second=59, microsecond=0) + timedelta(days=3)
        tariff = 250
        db.register(message.from_user.id, db.get_first_free_id(), user_name, telegram_username, current_time, shutdown_date, tariff)
        button_link_user = InlineKeyboardButton(text="–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", url=f"tg://user?id={message.from_user.id}")
        link_user_kb = InlineKeyboardMarkup(row_width=1)
        link_user_kb.add(button_link_user)
        
        await bot.send_message(376131047, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è!\n' # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                                        f'User id: {message.from_user.id}\n'
                                        f'–ò–º—è: {message.from_user.first_name} {message.from_user.last_name}', reply_markup=link_user_kb)
        
        await message.answer(messages.registation_successfully, reply_markup=mainmenu.main_kb(message.from_user.id))
        await bot.send_animation(message.from_user.id, animation='https://i.gifer.com/Be.gif')


@dp.message_handler(text="–°—Ç–æ–∏–º–æ—Å—Ç—å")
async def price(message: types.Message):
    await message.answer(messages.price)


@dp.message_handler(text="–û —Å–µ—Ä–≤–∏—Å–µ")
async def about(message: types.Message):
    await message.answer(messages.about)


@dp.message_handler(text="–ö–∞–∫ –æ–ø–ª–∞—Ç–∏—Ç—å")
async def how_to_pay(message: types.Message):
    await message.answer(messages.how_to_pay, reply_markup=mainmenu.main_kb(message.from_user.id))


@dp.message_handler(text="–û–ø–ª–∞—Ç–∏—Ç—å")
async def pay(message: types.Message):
    if db.when_to_pay(message.from_user.id):
        if message.chat.type == 'private':
            pay_menu = InlineKeyboardMarkup(row_width=1)
            button_url_qiwi = InlineKeyboardButton(text='–û–ø–ª–∞—Ç–∏—Ç—å –∫–∞—Ä—Ç–æ–π', callback_data='pay_by_card')
            button_pay_by_phone = InlineKeyboardButton(text='–û–ø–ª–∞—Ç–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥–æ–º', callback_data='pay_by_phone_number')
            pay_menu.insert(button_url_qiwi).insert(button_pay_by_phone)
            await message.answer(f'–ö –æ–ø–ª–∞—Ç–µ: {db.get_tariff(message.from_user.id)}—Ä.\n\n–í—ã –º–æ–∂–µ—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å –¥–≤—É–º—è —Å–ø–æ—Å–æ–±–∞–º–∏.\n\n–ö–∞–∫ –≤–∞–º –±—É–¥–µ—Ç —É–¥–æ–±–Ω–µ–µ?', reply_markup=pay_menu)
    else:
        await message.answer(f"–ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π—Ç–µ, –≤–∞–º –Ω–µ –Ω–∞–¥–æ –ø–ª–∞—Ç–∏—Ç—å –∑–∞ VPN!\n\n–≠—Ç–æ —Ç–∞–∫ –∑–¥–æ—Ä–æ–≤–æ! üò∏", reply_markup=mainmenu.main_kb(message.from_user.id))


@dp.callback_query_handler(text="pay_by_card")
async def pay(callback: types.Message):
    comment = str(callback.from_user.id) + '_' + str(random.randint(1000, 9999))
    bill = p2p.bill(amount=db.get_tariff(callback.from_user.id), lifetime=1440, comment=comment, theme_code="Nykyta-MKpy0OCKJW")
    db.add_check(callback.from_user.id, bill.bill_id)
    await bot.send_message(callback.from_user.id, messages.pay_by_card, reply_markup=buy_menu(url=bill.pay_url, bill=bill.bill_id))


@dp.callback_query_handler(text='pay_by_phone_number')
async def pay_by_phone_number(callback: types.CallbackQuery):
    await bot.send_message(callback.from_user.id, messages.pay_by_phone_number)


@dp.callback_query_handler(text_contains='check_')
async def check(callback: types.CallbackQuery):
    bill = str(callback.data[6:])
    info = db.get_check(bill)
    if info != False:
        if str(p2p.check(bill_id=bill).status) == 'PAID':
            db.add_days(callback.from_user.id)
            next_payment_date = db.when_to_pay(callback.from_user.id)
            button_link_user = InlineKeyboardButton(text="–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", url=f"tg://user?id={callback.from_user.id}")
            link_user_kb = InlineKeyboardMarkup(row_width=1)
            link_user_kb.add(button_link_user)
            sc.delete_limit(db.get_rdn_id_from_user(callback.from_user.id)[0], db.get_rdn_id_from_user(callback.from_user.id)[1], db.get_rdn_id_from_user(callback.from_user.id)[2]) 
            db.update_flag_blocked(callback.from_user.id, 'false')  
            await callback.message.edit_reply_markup() 
            await bot.send_message(callback.from_user.id, f"–°–ø–∞—Å–∏–±–æ, –æ–ø–ª–∞—Ç–∞ –ø—Ä–∏–Ω—è—Ç–∞.\n\n–î–æ—Å—Ç—É–ø –∫ —Å–µ—Ä–≤–∏—Å—É —É–∂–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.\n\n–î–∞—Ç–∞ —Å–ª–µ–¥—É—é—â–µ–π –æ–ø–ª–∞—Ç—ã: –¥–æ {next_payment_date}\n\n–ù–∞–ø–æ–º–Ω—é –≤ –¥–µ–Ω—å –æ–ø–ª–∞—Ç—ã.", reply_markup=mainmenu.main_kb(callback.from_user.id))
            await bot.send_animation(callback.from_user.id, animation='https://i.gifer.com/2Ts.gif')
            await bot.send_message(376131047, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id {callback.from_user.id} ({callback.from_user.username} / {callback.from_user.first_name}) –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –æ–ø–ª–∞—Ç—É —á–µ—Ä–µ–∑ QIWI', reply_markup=link_user_kb)
        else:
            await bot.send_message(callback.from_user.id, '–ú—ã –Ω–µ –≤–∏–¥–∏–º –æ–ø–ª–∞—Ç—É –æ—Ç –≤–∞—Å üßê', reply_markup=buy_menu(False, bill=bill))
    else:
        await bot.send_message(callback.from_user.id, '–°—á—ë—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω')


@dp.message_handler(text="–ü–æ–ª—É—á–∏—Ç—å –∫–ª—é—á")
async def get_keys(message: types.Message):
    user_id = str(message.from_user.id)
    if db.is_registered(user_id):
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞", reply_markup=servers_kb)
    else:
        keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(button_register).add(button_cancel)
        await message.answer('–í—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è"', reply_markup=keyboard)


@dp.message_handler(text="–í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è üá¨üáß")
async def get_keys(message: types.Message):
    await message.answer("–°–∫–æ–ø–∏—Ä—É–π –∫–ª—é—á –∏–∑ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –≤—Å—Ç–∞–≤—å –µ–≥–æ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Outline")
    await message.answer(db.get_key(message.from_user.id, 'rdn1'), reply_markup=servers_kb)


@dp.message_handler(text="–ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã üá≥üá±")
async def get_keys(message: types.Message):
    await message.answer("–°–∫–æ–ø–∏—Ä—É–π –∫–ª—é—á –∏–∑ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –≤—Å—Ç–∞–≤—å –µ–≥–æ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Outline")
    await message.answer(db.get_key(message.from_user.id, 'rdn2'), reply_markup=servers_kb)


@dp.message_handler(text="–°–∫–∞—á–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")
async def get_keys(message: types.Message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —ç—Ç–æ–≥–æ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∏–ª–∏ –Ω–µ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –µ–º—É –ø–æ–ª—É—á–∏—Ç—å –∫–ª—é—á
    if db.is_registered(message.from_user.id):
        buttons = [
            types.InlineKeyboardButton(text="Outline –¥–ª—è IOS", url="https://apps.apple.com/ru/app/outline-app/id1356177741"),
            types.InlineKeyboardButton(text="Outline –¥–ª—è Android", url="https://play.google.com/store/apps/details?id=org.outline.android.client&hl=ru&gl=US"),
            types.InlineKeyboardButton(text="Outline –¥–ª—è Windows", url="https://raw.githubusercontent.com/Jigsaw-Code/outline-releases/master/client/stable/Outline-Client.exe")
        ]
        keyboard = types.InlineKeyboardMarkup(row_width=1)
        keyboard.add(*buttons)
        await message.answer("–°–∫–∞—á–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ —Å—Å—ã–ª–∫–∞–º –Ω–∏–∂–µ:", reply_markup=keyboard)
        await message.answer('–°–∫–∞—á–∞–ª–∏? –¢–µ–ø–µ—Ä—å –∂–º–∏—Ç–µ "–ü–æ–ª—É—á–∏—Ç—å –∫–ª—é—á" –∏ –≤—ã–±–∏—Ä–∞–π—Ç–µ —Å—Ç—Ä–∞–Ω—É.')
    else: 
        buttons = [
            types.InlineKeyboardButton(text="Outline –¥–ª—è IOS", url="https://apps.apple.com/ru/app/outline-app/id1356177741"),
            types.InlineKeyboardButton(text="Outline –¥–ª—è Android", url="https://play.google.com/store/apps/details?id=org.outline.android.client&hl=ru&gl=US"),
            types.InlineKeyboardButton(text="Outline –¥–ª—è Windows", url="https://raw.githubusercontent.com/Jigsaw-Code/outline-releases/master/client/stable/Outline-Client.exe")
        ]
        keyboard = types.InlineKeyboardMarkup(row_width=1)
        keyboard.add(*buttons)
        await message.answer("–°–∫–∞—á–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ —Å—Å—ã–ª–∫–∞–º –Ω–∏–∂–µ:", reply_markup=keyboard)


@dp.message_handler(text="–î–∞—Ç–∞ –æ–ø–ª–∞—Ç—ã")
async def when_to_pay(message: types.Message):
    if db.when_to_pay(message.from_user.id):
        await message.answer(f"–í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–ø–ª–∞—Ç–∏—Ç—å {db.get_tariff(message.from_user.id)} —Ä—É–±–ª–µ–π –¥–æ {db.when_to_pay(message.from_user.id)} –ú–°–ö\n\n–ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π—Ç–µ, —è –≤–∞–º –Ω–∞–ø–æ–º–Ω—é –≤ –¥–µ–Ω—å –æ–ø–ª–∞—Ç—ã.", reply_markup=mainmenu.main_kb(message.from_user.id))
    else:
        await message.answer(f"–ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π—Ç–µ, –≤–∞–º –Ω–µ –Ω–∞–¥–æ –ø–ª–∞—Ç–∏—Ç—å –∑–∞ VPN!\n\n–≠—Ç–æ —Ç–∞–∫ –∑–¥–æ—Ä–æ–≤–æ! üò∏", reply_markup=mainmenu.main_kb(message.from_user.id))


@dp.message_handler(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def cancel(message: types.Message):
    await message.answer("–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=mainmenu.main_kb(message.from_user.id))    


@dp.message_handler(text_contains='ss://') 
async def get_all_message(message: types.Message):
    buttons = [
            types.InlineKeyboardButton(text="Outline –¥–ª—è IOS", url="https://apps.apple.com/ru/app/outline-app/id1356177741"),
            types.InlineKeyboardButton(text="Outline –¥–ª—è Android", url="https://play.google.com/store/apps/details?id=org.outline.android.client&hl=ru&gl=US"),
            types.InlineKeyboardButton(text="Outline –¥–ª—è Windows", url="https://raw.githubusercontent.com/Jigsaw-Code/outline-releases/master/client/stable/Outline-Client.exe")
        ]
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(*buttons)
    await message.answer("–≠—Ç–æ—Ç –∫–ª—é—á –Ω—É–∂–Ω–æ –≤—Å—Ç–∞–≤–∏—Ç—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Outline.\n\n–ù–∏–∂–µ –ø–æ—è–≤–∏–ª–∏—Å—å –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.", reply_markup=keyboard)


@dp.message_handler(text=["–ü–æ–º–æ—â—å", "–ø–æ–º–æ—â—å", "Help", "help"])
async def cancel(message: types.Message):
    button_link_user = InlineKeyboardButton(text="–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", url=f"tg://user?id={message.from_user.id}")
    link_user_kb = InlineKeyboardMarkup(row_width=1)
    link_user_kb.add(button_link_user)
    await message.answer("–ü—Ä–æ—Å—å–±–∞ –æ –ø–æ–º–æ—â–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –û–Ω –Ω–∞–ø–∏—à–µ—Ç –≤–∞–º —Å–æ —Å–≤–æ–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ —Ç–µ—á–µ–Ω–∏–∏ 5 –º–∏–Ω—É—Ç.", reply_markup=mainmenu.main_kb(message.from_user.id))
    await bot.send_message(376131047, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id {message.from_user.id} ({message.from_user.username} / {message.from_user.first_name} {message.from_user.last_name}) –Ω—É–∂–¥–∞–µ—Ç—Å—è –≤ –ø–æ–º–æ—â–∏', reply_markup=link_user_kb)  


@dp.message_handler(text=["–¢–∞—Ä–∏—Ñ 200", "—Ç–∞—Ä–∏—Ñ 200"])
async def cancel(message: types.Message):
    button_link_user = InlineKeyboardButton(text="–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", url=f"tg://user?id={message.from_user.id}")
    link_user_kb = InlineKeyboardMarkup(row_width=1)
    link_user_kb.add(button_link_user)
    db.set_tariff(message.from_user.id)
    await message.answer("–í–∞–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç–∞—Ä–∏—Ñ 200 —Ä—É–±–ª–µ–π / –º–µ—Å.", reply_markup=mainmenu.main_kb(message.from_user.id))
    await bot.send_message(376131047, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id {message.from_user.id} ({message.from_user.username} / {message.from_user.first_name} {message.from_user.last_name}) —É—Å—Ç–∞–Ω–æ–≤–∏–ª —Ç–∞—Ä–∏—Ñ 200 —Ä—É–±–ª–µ–π', reply_markup=link_user_kb)  


@dp.message_handler(content_types='text') 
async def get_all_message(message: types.Message):
    await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –µ—â—ë –Ω–µ —É–º–µ—é –æ–±—â–∞—Ç—å—Å—è –∫–∞–∫ Siri –∏–ª–∏ –ê–ª–∏—Å–∞ –∏ –Ω–µ –ø–æ–Ω–∏–º–∞—é –≤–∞—Å.\n\n–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏, –Ω–∞–ø–∏—à–∏—Ç–µ \"–ü–æ–º–æ—â—å\" –∏ –º—ã –ø–æ–º–æ–∂–µ–º –≤–∞–º.", reply_markup=mainmenu.main_kb(message.from_user.id))


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)